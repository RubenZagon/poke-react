{"version":3,"sources":["styled.tsx","components/card/typeBlock.tsx","tools/capitalize.tsx","components/card/statRow.tsx","components/card/cardPokemon.tsx","services/base.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["styled","TypeBlock","type","Container","color","div","props","colorSelector","capitalize","text","letters","split","letter","charAt","toLocaleUpperCase","substr","join","StatRow","name","stat","base_stat","GraphicLine","results","CardPokemon","useState","types","sprites","front_default","stats","pokemonInfo","setPokemonInfo","useEffect","randomID","Math","round","random","axios","get","then","res","pokemon","data","statsRender","map","e","typesRender","src","alt","height","TyposContainer","StatsContainer","reverse","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.278a421a.chunk.js","sourcesContent":["import styled, { CreateStyled } from '@emotion/styled'\r\n\r\ntype Theme = {\r\n  color: {\r\n    primary: string\r\n  }\r\n}\r\n\r\nexport default styled as CreateStyled<Theme>","import React, { FC } from \"react\";\r\nimport styled from '../../styled';\r\n\r\ninterface TypeBlockProps {\r\n  type: string\r\n}\r\n\r\nexport const TypeBlock: FC<TypeBlockProps> = ({ type }) => {\r\n  return (\r\n    <Container color={type}>\r\n      <p>{type}</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\nbackground: ${props => colorSelector(props.color!)};\r\ncolor:white;\r\npadding:0px;\r\nmargin:0px;\r\nheight:30px;\r\nwidth: 70px;\r\nmargin-right: 5px;\r\nborder-radius:5px;\r\n\r\ndisplay:flex;\r\njustify-content:center;\r\nalign-items:center;\r\n`\r\n\r\nfunction colorSelector(type: string): string {\r\n\r\n  switch (type) {\r\n    case 'normal':\r\n      return '#a8a878'\r\n    case 'fire':\r\n      return 'red'\r\n    case 'water':\r\n      return '#6890f0'\r\n    case 'grass':\r\n      return '#78c850'\r\n    case 'electric':\r\n      return '#f8d030'\r\n    case 'ice':\r\n      return '#98d8d8'\r\n    case 'fighting':\r\n      return '#c03028'\r\n    case 'poison':\r\n      return '#a040a0'\r\n    case 'ground':\r\n      return '#e0c068'\r\n    case 'psychic':\r\n      return '#f85888'\r\n    case 'rock':\r\n      return '#b8a038'\r\n    case 'ghost':\r\n      return '#705898'\r\n    case 'dark':\r\n      return '#705848'\r\n    case 'dragon':\r\n      return '#705898'\r\n    case 'steel':\r\n      return '#b8b8d0'\r\n    case 'fairy':\r\n      return '#f0b6bc'\r\n    case 'bug':\r\n      return 'green'\r\n    case 'flying':\r\n      return '#a890f0'\r\n    default:\r\n      return 'white'\r\n  }\r\n\r\n}","export function capitalize(text: string) {\r\n  const letters = text.split(/[,_-]/g);\r\n  let letter = letters[0];\r\n  letter = letter.charAt(0).toLocaleUpperCase() + letter.substr(1);\r\n  letters[0] = letter;\r\n  return letters.join(\"\");\r\n}\r\n","import React, { FC } from \"react\";\r\nimport styled from '../../styled';\r\nimport { capitalize } from \"../../tools/capitalize\";\r\n\r\ninterface StatRowProps {\r\n  stat: {\r\n    base_stat: number,\r\n    stat: {\r\n      name: string\r\n    }\r\n  }\r\n}\r\n\r\nexport const StatRow: FC<StatRowProps> = ({ stat }) => {\r\n  let name: string\r\n\r\n  switch (stat.stat.name) {\r\n    case 'special-attack':\r\n      name = 'Sp. Attack'\r\n      break;\r\n    case \"special-defense\":\r\n      name = 'Sp. Defense'\r\n      break;\r\n    default:\r\n      name = capitalize(stat.stat.name)\r\n      break;\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <p>{name} </p>\r\n      <p>{stat.base_stat}</p>\r\n      <GraphicLine results={stat.base_stat}>\r\n        <span></span>\r\n      </GraphicLine>\r\n    </Container>\r\n  );\r\n};\r\n\r\n\r\nconst Container = styled.div`\r\nmargin-top:5px;\r\ndisplay:flex;\r\nflex-direction: row;\r\njustify-content: space-around;\r\nalign-items:center;\r\n`\r\n\r\nconst GraphicLine = styled.div`\r\n  background: lightgrey;\r\n  width: 40%;\r\n  height:7px;\r\n  border-radius:5px;\r\n  display:flex;\r\n  overflow:hidden;\r\n\r\n  span  {\r\n    background: ${props => props.results! >= 50 ? 'lightgreen' : 'red'};\r\n    width:${props => props.results!}%;\r\n    height:100%;\r\n  }\r\n`","import React, { FC, useState, useEffect } from \"react\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport styled from '../../styled';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from \"../../services/base\";\r\nimport { TypeBlock } from \"./typeBlock\";\r\nimport { StatRow } from \"./statRow\";\r\nimport { capitalize } from \"../../tools/capitalize\";\r\n\r\ninterface cardPokemonProps {\r\n\r\n}\r\n\r\ninterface ServerResponse {\r\n  data: pokemon\r\n}\r\n\r\ninterface pokemonProps {\r\n  name: string\r\n}\r\n\r\ninterface pokemonType {\r\n  type: pokemonProps\r\n}\r\n\r\ninterface pokemonStat {\r\n  stat: {\r\n    name: string\r\n  },\r\n  base_stat: number\r\n}\r\n\r\ninterface pokemon {\r\n  name: string\r\n  types?: pokemonType[]\r\n  sprites: { front_default: string }\r\n  stats: pokemonStat[]\r\n}\r\n\r\nexport const CardPokemon: FC<cardPokemonProps> = (props) => {\r\n  const [pokemonInfo, setPokemonInfo] = useState<pokemon>(\r\n    {\r\n      name: '',\r\n      types: [{ type: { name: \"\" } }],\r\n      sprites: { front_default: '' },\r\n      stats: [{ stat: { name: \"\" }, base_stat: 0 }]\r\n    });\r\n\r\n\r\n  useEffect(() => {\r\n    let randomID = Math.round(Math.random() * 150)\r\n\r\n    axios.get(`${BASE_URL}pokemon/${randomID}/`).then((res: ServerResponse) => {\r\n      const pokemon = res.data\r\n      setPokemonInfo({\r\n        name: capitalize(pokemon.name),\r\n        types: [...pokemon.types],\r\n        sprites: pokemon.sprites,\r\n        stats: [...pokemon.stats]\r\n      });\r\n    })\r\n  }, [])\r\n\r\n  let statsRender = pokemonInfo.stats!.map(e => {\r\n    return (\r\n      <StatRow stat={e} />\r\n    )\r\n  });\r\n\r\n  let typesRender = pokemonInfo.types!.map(e => {\r\n    return (\r\n      <TypeBlock type={e.type.name} />\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {pokemonInfo ? <h2>{pokemonInfo.name}</h2> : <h1>Cargando...</h1>}\r\n      <img src={pokemonInfo.sprites.front_default} alt={pokemonInfo.name} height=\"200px\" />\r\n      <TyposContainer>\r\n        {typesRender}\r\n      </TyposContainer>\r\n      <StatsContainer>\r\n        {statsRender.reverse()}\r\n      </StatsContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nconst TyposContainer = styled.div`\r\n            display: flex;\r\n            justify-content:center;\r\n            align-items:center;\r\n            `\r\n\r\nconst StatsContainer = styled.div`\r\n            display:grid;\r\n            background: white;\r\n            border-radius: 20px 20px 0px 0px;\r\n`","export const BASE_URL = 'https://pokeapi.co/api/v2/';\r\nexport const toJson = res => res.json();","import React from 'react';\nimport './App.css';\nimport { CardPokemon } from './components/card/cardPokemon';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CardPokemon />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}